<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:defaultstatistics="services.defaultstatistics.*"
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="800" height="600"	 
		 xmlns:Examples="Examples.*"
		 creationComplete="start();" xmlns:collections="com.degrafa.core.collections.*"  >
	<!--<fx:Style source="styles/Golibaje.css"/>-->
	<s:states>
		<s:State name="barChart" />
		<s:State name="lineChart" />
		<s:State name="dataGrid" />
	</s:states>
	<fx:Script>
		<![CDATA[
			import com.Teacher.UI.Utilities;
			import CustomEvents.ChartLoadedEvent;			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.rpc.events.ResultEvent;
			import mx.utils.object_proxy;			
			import org.axiis.core.AxiisSprite;
			import org.axiis.data.DataSet;			
			private var ds:DataSet = new DataSet();			
			public var loaded:Boolean = false;			
			
			/**
			 * Make this false, if you don't need student details
			 * */
			[Bindable]
			public var studentStats:Boolean = true;
			
			/**
			 * Make this false, if you don't need class average
			 * */
			[Bindable]
			public var classAverage:Boolean = true;
			
			/**
			 * Make this false, if you don't need school average, true if you need it
			 * */
			[Bindable]
			public var schoolAverage:Boolean = true;
			
			
			/** 
			 * Set this variable to the appropriate time gap used by the data. month, week, day
			 * */ 
			[Bindable]
			public var timeIncrement:String = "month";
			
			[Bindable]
			public var performanceData:ArrayCollection = new ArrayCollection([
				{month:"January", correct:100, correctOutsideBase:50,
					incorrect:50, skipped:25, total:225},
				{month:"February", correct:110, correctOutsideBase:40,
					incorrect:50, skipped:30, total:230},
				{month:"March", correct:120, correctOutsideBase:40,
					incorrect:25, skipped:30, total:215},
				{month:"April",correct:110, correctOutsideBase:45,
					incorrect:20, skipped:20, total:195},
				{month:"May", correct:135, correctOutsideBase:25,
					incorrect:25, skipped:15, total:200},
				{month:"June", correct:150, correctOutsideBase:15,
					incorrect:15, skipped:5, total:185},
				{month:"July", correct:155, correctOutsideBase:10,
					incorrect:10, total:175},
				{month:"August", correct:160, correctOutsideBase:5,
					incorrect:15, total:180},
				{month:"September",correct:170, correctOutsideBase:5,
					incorrect:10, total:185}
			]);
						
			[Bindable]
			public var classAvgPerformanceData:ArrayCollection = new ArrayCollection([
				{month:"January", correct:110, correctOutsideBase:60,
					incorrect:50, skipped:25, total:245},
				{month:"February", correct:120, correctOutsideBase:50,
					incorrect:50, skipped:30, total:250},
				{month:"March", correct:125, correctOutsideBase:45,
					incorrect:25, skipped:30, total:225},
				{month:"April",correct:120, correctOutsideBase:55,
					incorrect:20, skipped:20, total:215},
				{month:"May", correct:120, correctOutsideBase:50,
					incorrect:20, skipped:17, total:207},
				{month:"June", correct:130, correctOutsideBase:40,
					incorrect:15, skipped:5, total:190},
				{month:"July", correct:140, correctOutsideBase:15,
					incorrect:5, skipped:10, total:170},
				{month:"August", correct:150, correctOutsideBase:15,
					incorrect:15, skipped:10, total:190},
				{month:"September",correct:170, correctOutsideBase:5,
					incorrect:10, skipped:5, total:190}
			]);
			
			[Bindable]
			public var schoolAvgPerformanceData:ArrayCollection = new ArrayCollection([
				{month:"January", correct:100, correctOutsideBase:60,
					incorrect:50, skipped:22, total:245},
				{month:"February", correct:90, correctOutsideBase:50,
					incorrect:50, skipped:30, total:250},
				{month:"March", correct:120, correctOutsideBase:45,
					incorrect:25, skipped:30, total:225},
				{month:"April",correct:115, correctOutsideBase:55,
					incorrect:20, skipped:20, total:215},
				{month:"May", correct:150, correctOutsideBase:50,
					incorrect:20, skipped:17, total:207},
				{month:"June", correct:120, correctOutsideBase:40,
					incorrect:15, skipped:5, total:190},
				{month:"July", correct:130, correctOutsideBase:15,
					incorrect:5, skipped:10, total:170},
				{month:"August", correct:115, correctOutsideBase:15,
					incorrect:15, skipped:5, total:190},
				{month:"September",correct:126, correctOutsideBase:5,
					incorrect:10, skipped:5, total:190}
			]);
			
			
			[Bindable]
			public var pointsData:ArrayCollection = new ArrayCollection([
				{month:"January", points:1000},
				{month:"February", points:1200},
				{month:"March", points:1400},
				{month:"April",points:1500},
				{month:"May", points:1600},
				{month:"June", points:1650},
				{month:"July", points: 1800},
				{month:"August", points: 2000},
				{month:"September", points: 2500}
			]);
			
			public function start():void
			{
				var t:Timer = new Timer(2000, 1);				
				t.addEventListener(TimerEvent.TIMER_COMPLETE, fireChartLoaded);
				t.start();
			}
			
			private function fireChartLoaded(event){				
				loaded = true;
				dispatchEvent(new Event("chartLoaded"));
			}
		]]>
	</fx:Script>
	
	<fx:Declarations>	
		<s:Stroke color="0x660066" weight="5" id="pointsStroke" />
	</fx:Declarations>
	<s:VGroup width="100%" height="100%">
		<s:HGroup>
			<s:Button label="Line Chart" click="{this.currentState = 'lineChart'}" />
			<s:Button label="Bar Chart" click="{this.currentState = 'barChart'}" />
			<s:Button label="Raw Data" click="{this.currentState = 'dataGrid'}" />	
		</s:HGroup>
		<s:DataGrid dataProvider="{performanceData}" width="90%" includeIn="dataGrid">
			<s:columns>
				<s:ArrayList>
					<s:GridColumn dataField="month" headerText="Month"/>
					<s:GridColumn dataField="correct"  headerText="Correct"/>					
					<s:GridColumn dataField="correctOutsideBase"  headerText="Correct Outside Base"/>
					<s:GridColumn dataField="incorrect"  headerText="Incorrect"/>
					<s:GridColumn dataField="skipped"  headerText="Skipped"/>
				</s:ArrayList>
			</s:columns>
		</s:DataGrid>
	</s:VGroup>
	<mx:CartesianChart id="PerformanceTimeChart" dataProvider="{performanceData}"
					showDataTips="true" width="100%" height="90%" 
					verticalCenter="0" horizontalCenter="0" fontSize="20" fontFamily="Arial"
					includeIn="barChart">
		<mx:verticalAxisRenderers>
			<mx:AxisRenderer placement="left" axis="{columnAxis}"/>
			<mx:AxisRenderer placement="right" axis="{pointsAxis}" visible="{studentStats}"/>
		</mx:verticalAxisRenderers>
		<mx:horizontalAxis>
			<mx:CategoryAxis categoryField="{timeIncrement}"/>
		</mx:horizontalAxis>
		<mx:verticalAxis>
			<mx:LinearAxis id="columnAxis" title="Answers" 
						   maximum="{Math.max(studentStats?Utilities.getMax(performanceData, 'total'):0, 
						   					  classAverage?Utilities.getMax(classAvgPerformanceData, 'total'):0,
						   					  schoolAverage?Utilities.getMax(schoolAvgPerformanceData, 'total'):0)
						   			+50}"/>
		</mx:verticalAxis>
		<mx:series>
			<mx:ColumnSet type="clustered">
				<mx:ColumnSet type="stacked" verticalAxis="{columnAxis}" visible="{studentStats}">
					<mx:ColumnSeries
						yField="correct"
						displayName="Correct"
						verticalAxis="{columnAxis}" 
						itemRenderer="mx.charts.renderers.ShadowBoxItemRenderer">
						<mx:fill>
							<mx:LinearGradient id="linearGradient1">
								<mx:entries>
									<fx:Array>
										<mx:GradientEntry color="red"
														  ratio="0.0"
														  alpha="1.0" />
										<mx:GradientEntry color="black"
														  ratio="1.0"
														  alpha="1.0" />
									</fx:Array>
								</mx:entries>
							</mx:LinearGradient>
						</mx:fill>
					</mx:ColumnSeries>
					<mx:ColumnSeries
						yField="correctOutsideBase"
						displayName="Correct Outside Base"
						verticalAxis="{columnAxis}" 
						itemRenderer="mx.charts.renderers.ShadowBoxItemRenderer">
						<mx:fill>
							<mx:LinearGradient id="linearGradient2">
								<mx:entries>
									<fx:Array>
										<mx:GradientEntry color="green"
														  ratio="0.0"
														  alpha="1.0" />
										<mx:GradientEntry color="black"
														  ratio="1.0"
														  alpha="1.0" />
									</fx:Array>
								</mx:entries>
							</mx:LinearGradient>
						</mx:fill>
					</mx:ColumnSeries>
					<mx:ColumnSeries
						yField="incorrect"
						displayName="Wrong Answer"
						verticalAxis="{columnAxis}" 
						itemRenderer="mx.charts.renderers.ShadowBoxItemRenderer">
						<mx:fill>
							<mx:LinearGradient id="linearGradient3">
								<mx:entries>
									<fx:Array>
										<mx:GradientEntry color="blue"
														  ratio="0.0"
														  alpha="1.0" />
										<mx:GradientEntry color="black"
														  ratio="1.0"
														  alpha="1.0" />
									</fx:Array>
								</mx:entries>
							</mx:LinearGradient>
						</mx:fill>
					</mx:ColumnSeries>
					<mx:ColumnSeries
						yField="skipped"
						displayName="Skipped Question"
						verticalAxis="{columnAxis}" 
						itemRenderer="mx.charts.renderers.ShadowBoxItemRenderer">
						<mx:fill>
							<mx:LinearGradient id="linearGradient4">
								<mx:entries>
									<fx:Array>
										<mx:GradientEntry color="gray"
														  ratio="0.0"
														  alpha="1.0" />
										<mx:GradientEntry color="black"
														  ratio="1.0"
														  alpha="1.0" />
									</fx:Array>
								</mx:entries>
							</mx:LinearGradient>
						</mx:fill>
					</mx:ColumnSeries>
				</mx:ColumnSet>
				<mx:ColumnSet type="stacked" verticalAxis="{columnAxis}" visible="{classAverage}" 
							  dataProvider="{classAvgPerformanceData}">
					<mx:ColumnSeries
						yField="correct"
						displayName="Class Average: Correct"
						verticalAxis="{columnAxis}" 
						itemRenderer="mx.charts.renderers.ShadowBoxItemRenderer">
						<mx:fill>
							<mx:LinearGradient id="linearGradient5">
								<mx:entries>
									<fx:Array>
										<mx:GradientEntry color="silver"
														  ratio="0.0"
														  alpha="1.0" />
										<mx:GradientEntry color="black"
														  ratio="1.0"
														  alpha="1.0" />
									</fx:Array>
								</mx:entries>
							</mx:LinearGradient>
						</mx:fill>
					</mx:ColumnSeries>
					<mx:ColumnSeries
						yField="correctOutsideBase"
						displayName="Class Average: Correct Outside Base"
						verticalAxis="{columnAxis}" 
						itemRenderer="mx.charts.renderers.ShadowBoxItemRenderer">
						<mx:fill>
							<mx:LinearGradient id="linearGradient6">
								<mx:entries>
									<fx:Array>
										<mx:GradientEntry color="lime"
														  ratio="0.0"
														  alpha="1.0" />
										<mx:GradientEntry color="black"
														  ratio="1.0"
														  alpha="1.0" />
									</fx:Array>
								</mx:entries>
							</mx:LinearGradient>
						</mx:fill>
					</mx:ColumnSeries>
					<mx:ColumnSeries
						yField="incorrect"
						displayName="Class Average: Wrong Answers"
						verticalAxis="{columnAxis}" 
						itemRenderer="mx.charts.renderers.ShadowBoxItemRenderer">
						<mx:fill>
							<mx:LinearGradient id="linearGradient7">
								<mx:entries>
									<fx:Array>
										<mx:GradientEntry color="yellow"
														  ratio="0.0"
														  alpha="1.0" />
										<mx:GradientEntry color="black"
														  ratio="1.0"
														  alpha="1.0" />
									</fx:Array>
								</mx:entries>
							</mx:LinearGradient>
						</mx:fill>
					</mx:ColumnSeries>
					<mx:ColumnSeries
						yField="skipped"
						displayName="Class Average: Skipped Questions"
						verticalAxis="{columnAxis}" 
						itemRenderer="mx.charts.renderers.ShadowBoxItemRenderer">
						<mx:fill>
							<mx:LinearGradient id="linearGradient8">
								<mx:entries>
									<fx:Array>
										<mx:GradientEntry color="purple"
														  ratio="0.0"
														  alpha="1.0" />
										<mx:GradientEntry color="black"
														  ratio="1.0"
														  alpha="1.0" />
									</fx:Array>
								</mx:entries>
							</mx:LinearGradient>
						</mx:fill>
					</mx:ColumnSeries>
				</mx:ColumnSet>
				<mx:ColumnSet type="stacked" verticalAxis="{columnAxis}" visible="{schoolAverage}" 
							  dataProvider="{schoolAvgPerformanceData}">
					<mx:ColumnSeries
						yField="correct"
						displayName="School Average: Correct"
						verticalAxis="{columnAxis}" 
						itemRenderer="mx.charts.renderers.ShadowBoxItemRenderer">
						<mx:fill>
							<mx:LinearGradient id="linearGradient9">
								<mx:entries>
									<fx:Array>
										<mx:GradientEntry color="0xFFFFCC"
														  ratio="0.0"
														  alpha="1.0" />
										<mx:GradientEntry color="black"
														  ratio="1.0"
														  alpha="1.0" />
									</fx:Array>
								</mx:entries>
							</mx:LinearGradient>
						</mx:fill>
					</mx:ColumnSeries>
					<mx:ColumnSeries
						yField="correctOutsideBase"
						displayName="School Average: Correct Outside Base"
						verticalAxis="{columnAxis}" 
						itemRenderer="mx.charts.renderers.ShadowBoxItemRenderer">
						<mx:fill>
							<mx:LinearGradient id="linearGradient10">
								<mx:entries>
									<fx:Array>
										<mx:GradientEntry color="red"
														  ratio="0.0"
														  alpha="1.0" />
										<mx:GradientEntry color="black"
														  ratio="1.0"
														  alpha="1.0" />
									</fx:Array>
								</mx:entries>
							</mx:LinearGradient>
						</mx:fill>
					</mx:ColumnSeries>
					<mx:ColumnSeries
						yField="incorrect"
						displayName="School Average: Wrong Answers"
						verticalAxis="{columnAxis}" 
						itemRenderer="mx.charts.renderers.ShadowBoxItemRenderer">
						<mx:fill>
							<mx:LinearGradient id="linearGradient11">
								<mx:entries>
									<fx:Array>
										<mx:GradientEntry color="0xCCCCFF"
														  ratio="0.0"
														  alpha="1.0" />
										<mx:GradientEntry color="black"
														  ratio="1.0"
														  alpha="1.0" />
									</fx:Array>
								</mx:entries>
							</mx:LinearGradient>
						</mx:fill>
					</mx:ColumnSeries>
					<mx:ColumnSeries
						yField="skipped"
						displayName="School Average: Skipped Questions"
						verticalAxis="{columnAxis}" 
						itemRenderer="mx.charts.renderers.ShadowBoxItemRenderer">
						<mx:fill>
							<mx:LinearGradient id="linearGradient12">
								<mx:entries>
									<fx:Array>
										<mx:GradientEntry color="green"
														  ratio="0.0"
														  alpha="1.0" />
										<mx:GradientEntry color="black"
														  ratio="1.0"
														  alpha="1.0" />
									</fx:Array>
								</mx:entries>
							</mx:LinearGradient>
						</mx:fill>
					</mx:ColumnSeries>
				</mx:ColumnSet>
			</mx:ColumnSet>
			<mx:LineSeries
				dataProvider="{pointsData}"
				yField="points"
				lineStroke="{pointsStroke}"
				displayName="My Points"
				visible="{studentStats}">
				<mx:verticalAxis>
					<mx:LinearAxis id="pointsAxis" title="Points"
								   maximum="{Utilities.getMax(pointsData, 'points')}"/>
				</mx:verticalAxis>
			</mx:LineSeries>
		</mx:series>
	</mx:CartesianChart>
</s:Group>