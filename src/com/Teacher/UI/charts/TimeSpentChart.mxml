<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:defaultstatistics="services.defaultstatistics.*"
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="800" height="600"	 
		 xmlns:Examples="Examples.*"
		 creationComplete="start();" xmlns:collections="com.degrafa.core.collections.*" 
		 xmlns:states="org.axiis.states.*"  fontSize="20">
	<!--<fx:Style source="styles/Golibaje.css"/>-->
	<s:states>
		<s:State name="lineChart" />
		<s:State name="columnChart" />
		<s:State name="dataGrid" />
	</s:states>
	<fx:Script>
		<![CDATA[
			import CustomEvents.ChartLoadedEvent;
			
			import com.Teacher.UI.Utilities;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.controls.Alert;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.FlexEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.object_proxy;
			
			import org.axiis.core.AxiisSprite;
			import org.axiis.data.DataSet;
			
			import spark.components.gridClasses.GridColumn;			
			private var ds:DataSet = new DataSet();			
			public var loaded:Boolean = false;			
			
			/** 
			 * Set this variable to the appropriate time gap used by the data. month, week, day
			 * */ 
			[Bindable]
			public var timeIncrement:String = "month";
			
			
			[Bindable]
			public var timeSpentData:ArrayCollection = new ArrayCollection([
				{month:"January", time:100},
				{month:"February", time:120},
				{month:"March", time:140},
				{month:"April",time:150},
				{month:"May", time:160},
				{month:"June", time:165},
				{month:"July", time: 180},
				{month:"August", time: 200},
				{month:"September", time: 250}
			]);
			
			
			[Bindable]
			public var showClass:Boolean = false;
			
			
			[Bindable]
			public var classTimeSpentData:ArrayCollection = new ArrayCollection([
				{
					name:'John', 
					data:[
						{month:"January", time:100},
						{month:"February", time:120},
						{month:"March", time:140},
						{month:"April",time:150},
						{month:"May", time:160},
						{month:"June", time:165},
						{month:"July", time: 180},
						{month:"August", time: 200},
						{month:"September", time: 250}
					]
				},
				{
					name:'Jack', 
					data:[
						{month:"January", time:120},
						{month:"February", time:130},
						{month:"March", time:110},
						{month:"April",time:155},
						{month:"May", time:130},
						{month:"June", time:140},
						{month:"July", time: 200},
						{month:"August", time: 120},
						{month:"September", time: 200}
					]
				},
				{
					name:'Rita', 
					data:[
						{month:"January", time:140},
						{month:"February", time:200},
						{month:"March", time:150},
						{month:"April",time:140},
						{month:"May", time:160},
						{month:"June", time:200},
						{month:"July", time: 200},
						{month:"August", time: 220},
						{month:"September", time: 260}
					]
				},
				{
					name:'Demi', 
					data:[
						{month:"January", time:150},
						{month:"February", time:160},
						{month:"March", time:200},
						{month:"April",time:160},
						{month:"May", time:160},
						{month:"June", time:175},
						{month:"July", time: 160},
						{month:"August", time: 210},
						{month:"September", time: 150}
					]
				},
				{
					name:'Riley', 
					data:[
						{month:"January", time:140},
						{month:"February", time:120},
						{month:"March", time:120},
						{month:"April",time:150},
						{month:"May", time:180},
						{month:"June", time:150},
						{month:"July", time: 200},
						{month:"August", time: 250},
						{month:"September", time: 230}
					]
				},
				{
					name:'Chris', 
					data:[
						{month:"January", time:150},
						{month:"February", time:250},
						{month:"March", time:220},
						{month:"April",time:160},
						{month:"May", time:100},
						{month:"June", time:50},
						{month:"July", time: 160},
						{month:"August", time: 170},
						{month:"September", time: 200}
					]
				}
			]);
			
			public function start():void
			{
				var t:Timer = new Timer(2000, 1);				
				t.addEventListener(TimerEvent.TIMER_COMPLETE, fireChartLoaded);
				t.start();
			}
			
			private function fireChartLoaded(event){				
				loaded = true;
				dispatchEvent(new Event("chartLoaded"));
			}
			
			protected function TimeSpentChart_initializeHandler(event:FlexEvent):void
			{
				if(showClass)
				{
					studentLineSeries.visible = false;				
					
					for each ( var student in classTimeSpentData)
					{
						var ls:LineSeries  = new LineSeries();
						ls.dataProvider = student['data'];
						ls.yField = 'time';
						ls.xField = 'month';
						ls.displayName = student['name'];
						var tmp:Array = TimeSpentStatistics.series; 
						tmp.push(ls) 
						TimeSpentStatistics.series = tmp; 
						TimeSpentStatistics.invalidateSeriesStyles();
					}
				}
			}
			
			protected function get rawData()
			{
				if(!showClass)
					return timeSpentData
				else 
				{
					var data:ArrayCollection = new ArrayCollection();
					
					for each (var student in classTimeSpentData)
					{
						var row = {name: student.name};
						
						for each (var time in student.data)
						{
							row[time[timeIncrement]] = time['time'];
						}
						
						data.addItem(row);
					}
					return data;
				}
			}
			
			protected function get dataColumnsList():ArrayList
			{
				if(!showClass)
				{
					var col1:GridColumn = new GridColumn(timeIncrement);
					var col2:GridColumn = new GridColumn('time');
					return new ArrayList([col1, col2]);
				} else {
					var columnList:ArrayList = new ArrayList();
					columnList.addItem(new GridColumn('name'));
					for each (var column in classTimeSpentData[0].data)
					{
						var col:GridColumn = new GridColumn(column[timeIncrement]);
						columnList.addItem(col);
					}
					return columnList;
				}
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>	
		<s:Stroke color="0x660066" weight="5" id="timeSpentStroke" />
	</fx:Declarations>
	<s:VGroup width="100%">
		<s:HGroup>
			<s:Button toolTip="Chart" click="{this.currentState = 'lineChart'}" 
					  styleName="btnChart" scaleX="0.75" scaleY="0.75"/>
			<s:Button toolTip="Raw Data" click="{this.currentState = 'dataGrid'}" 
					  styleName="btnRawData" scaleX="0.6" scaleY="0.6"/>
		</s:HGroup>	
		<s:DataGrid dataProvider="{rawData}" includeIn="dataGrid" width="90%" columns="{dataColumnsList}">
		</s:DataGrid>
	</s:VGroup>
	<mx:CartesianChart id="TimeSpentStatistics" dataProvider="{timeSpentData}"
					   showDataTips="true" width="100%" height="85%" 
					   verticalCenter="0" horizontalCenter="0" fontSize="20" 
					   fontFamily="Arial" initialize="TimeSpentChart_initializeHandler(event)"
					   includeIn="columnChart, lineChart">
		<mx:verticalAxisRenderers>
			<mx:AxisRenderer placement="left" axis="{timeSpentLineAxis}" includeIn="lineChart"/>
			<mx:AxisRenderer placement="left" axis="{timeSpentColumnAxis}" includeIn="columnChart"/>
		</mx:verticalAxisRenderers>
		<mx:horizontalAxis>
			<mx:CategoryAxis categoryField="{timeIncrement}"/>
		</mx:horizontalAxis>
		<mx:series>			
			<mx:LineSeries
				id="studentLineSeries"
				dataProvider="{timeSpentData}"
				yField="time"
				lineStroke="{timeSpentStroke}"
				displayName="Time Spent" includeIn="lineChart">
				<mx:verticalAxis>
					<mx:LinearAxis id="timeSpentLineAxis" title="Time Spent (in hours)"
								   maximum="{Utilities.getMax(timeSpentData, 'time')}"/>
				</mx:verticalAxis>
			</mx:LineSeries>
			<mx:ColumnSeries
				id="studentColumnSeries"
				dataProvider="{timeSpentData}"
				yField="time"
				xField="{timeIncrement}"
				displayName="Time Spent" includeIn="columnChart">
				<mx:verticalAxis>
					<mx:LinearAxis id="timeSpentColumnAxis" title="Time Spent (in hours)"
								   maximum="{Utilities.getMax(timeSpentData, 'time')}"/>
				</mx:verticalAxis>
			</mx:ColumnSeries>
		</mx:series>
	</mx:CartesianChart>
	<s:Label id="lblChart" text="{showClass?'Class Average Time Spent':'Student Time Spent'}" fontSize="20"
			 fontWeight="bold" bottom="{height*.025}"
			 horizontalCenter="-20%"/>
</s:Group>