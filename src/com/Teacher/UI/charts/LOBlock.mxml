<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer width="100" height="80"
				   backgroundFill="{fill()}" 
				   xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark"
				   xmlns:mx="library://ns.adobe.com/flex/mx" initialize="init()">
		
	<fx:Script>
		<![CDATA[
			import com.Teacher.UI.charts.HTMLToolTip;			
			import mx.collections.ArrayCollection;
			import mx.controls.Text;
			import mx.events.FlexEvent;
			import mx.managers.ToolTipManager;
			
			public var config:Array;
			
			public function init(){
				ToolTipManager.toolTipClass = HTMLToolTip;
				//config=parentApplication.config;
			}
			
			[Bindable]
			public var progress = {name:"test", correct: 50, wrong:25, skipped:10, incomplete:15};
			
			public function total():Number{
				return progress.correct + progress.wrong + progress.skipped 
					+ progress.incomplete;
			}
			
			[Bindable]
			public function fill():SolidColor{
				if(progress.correct == 0 &&
					progress.wrong == 0 &&
					progress.skipped == 0 && 
					progress.incomplete == 0)
					return colorSkipped;
				
				if(progress.incomplete <= 0) //just to ensure that negative incomplete is also treated as complete
					return colorCorrect;
				
				return colorIncomplete;
			}
			
			[bindable]
			public function dataTipFunction(prefix, count){
				return "<strong>"+prefix+":</strong> "+ count;
			}			
		]]>
	</fx:Script>
	<fx:Declarations>		
		<s:SolidColor id="colorCorrect" color="0x6AD271">			
		</s:SolidColor>
		<s:SolidColor id="colorWrong" color="0xFA4474">			
		</s:SolidColor>
		<s:SolidColor id="colorSkipped" color="0x858384">			
		</s:SolidColor>
		<s:SolidColor id="colorIncomplete" color="0xF6B571">		
		</s:SolidColor>
	</fx:Declarations>
		<mx:Text  id="loName" text="{progress.name as String}" width="90%" verticalCenter="-5" horizontalCenter="0" 
				  fontSize="{Math.floor(Math.sqrt(((this.height-10)*this.width)/((progress.name as String).length + 10)))}"/>
		<mx:HBox horizontalGap="0" bottom="0" fontFamily="Arial" fontSize="20">
			<s:BorderContainer id="rectCorrect" width="{progress.correct * (this.width - 2)/(total() == 0?1:total())}" 
							   backgroundFill="{colorCorrect}" height="15" horizontalCenter="0" toolTip="{dataTipFunction('Correct',progress.correct)}">
				<s:filters>
					<mx:BevelFilter/>
				</s:filters>
			</s:BorderContainer>
			<s:BorderContainer id="rectWrong" width="{progress.wrong * (this.width - 2)/(total() == 0?1:total())}" 
							   backgroundFill="{colorWrong}" height="15" horizontalCenter="0" toolTip="{dataTipFunction('Wrong',progress.wrong)}">
				<s:filters>
					<mx:BevelFilter/>
				</s:filters>
			</s:BorderContainer>
			<s:BorderContainer id="rectSkipped" width="{progress.skipped * (this.width - 2)/(total() == 0?1:total())}" 
							   backgroundFill="{colorSkipped}" height="15" horizontalCenter="0" toolTip="{dataTipFunction('Skipped', progress.skipped)}">
				<s:filters>
					<mx:BevelFilter/>
				</s:filters>
			</s:BorderContainer>
			<s:BorderContainer id="rectIncomplete" width="{progress.incomplete * (this.width - 2)/(total() == 0?1:total()) }" 
							   backgroundFill="{colorIncomplete}" height="15" horizontalCenter="0" toolTip="{dataTipFunction('Incomplete', progress.incomplete)}">
				<s:filters>
					<mx:BevelFilter/>
				</s:filters>
			</s:BorderContainer>
		</mx:HBox>
</s:BorderContainer>
