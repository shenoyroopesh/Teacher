<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="100%" height="100%" xmlns:UI="com.Teacher.UI.*"
		 currentState="Class" xmlns:charts="com.Teacher.UI.charts.*"
		 color="0xFFFFFF">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[			
			import mx.managers.PopUpManager;
			
			/**
			 * This sets the scale of the chart to fit it into the parent containers' dimensions. This is preferred to
			 * changing the dimensions of the chart directly, to avoid having to reset font-size automatically. Scaling
			 * changes the font-size seen on the screen too proportionally and keeps the chart readable.
			 * */
			[bindable]
			private function getChartsScale(chart:Group):Number
			{
				var scaleX:Number = (chart == statsChart? 0.48: 0.7) * middleContainer.width / chart.width;;
				var scaleY:Number = middleContainer.height / chart.height;
				return Math.min(scaleX, scaleY);
			}
			
			/**
			 * This opens a new window for assigning problem sets to the currently selected student
			 * */
			protected function openProblemSetWindow(event:Event):void
			{
				var problemSetWindow:CreateProblemSet = new CreateProblemSet();
				problemSetWindow.open(true);
			}
			
			/**
			 * Used for the chat popup.
			 * */
			private function openWindow(event:Event):void
			{
				var chat:chatWindow = PopUpManager.createPopUp(this, chatWindow, false) as chatWindow; 
				chat.otherUser = new User("Roopesh");
				chat.user = new User("Sang");
			}
			
		]]>
	</fx:Script>
	<s:states>
		<s:State name="Student" />
		<s:State name="Class" />
		<s:State name="StudentAccuracy" />
		<s:State name="StudentLO" />
		<s:State name="StudentPerformance" />
		<s:State name="StudentStats" />
		<s:State name="StudentTimeSpent" />
		<s:State name="ClassPerformance" />
		<s:State name="ClassTimeSpent" />
	</s:states>
	<s:Rect width="100%" height="100%">
		<s:fill>
			<s:SolidColor color="0x000000"/>
		</s:fill>
	</s:Rect>
	<s:VGroup id="mainContainer" width="100%" height="100%">
		<s:HGroup width="100%" height="15%" id="topContainer">
			<UI:CustomButton id="classButton"  
							 click="{this.currentState = 'Class'}" 
							 label="Class" height="100%" width="12%"
							 style="performanceClass">
				<UI:filters>
					<s:BevelFilter angle="0" />
				</UI:filters>
			</UI:CustomButton>
			<UI:CustomButton id="studentButton" 
							 click="{this.currentState = 'StudentStats'}" 
							 label="Student" height="100%" width="12%"
							 style="performanceStudent">
			</UI:CustomButton>
			<UI:DateRangePick width="25%"/>	
			<UI:statsSummary id="statsSummary" height="100%" width="48%" />
		</s:HGroup>
		<s:BorderContainer  height="75%" width="100%" color="0x000000">
			<s:Rect  width="100%" height="100%">
				<s:fill>
					<s:SolidColor color="0xFFFFFF"/>
				</s:fill>
			</s:Rect>		
			<s:HGroup id="middleContainer" height="100%" width="100%">
				<s:DataGrid id="classGrid" includeIn="Class" height="100%" width="100%" >
				</s:DataGrid>
				<s:DataGrid id="studentGrid" excludeFrom="Class" width="25%" height="100%">
				</s:DataGrid>
				<s:HGroup width="75%" height="100%" id="statsContainer" includeIn="StudentStats" verticalAlign="middle">
					<s:VGroup gap="15" width="37%" height="75%" verticalCenter="0">
						<s:Label id="timeSpent" text="Time Spent: 67 minutes"/>
						<s:Label id="pointsEarned" text="Points Earned: 58" />
						<s:Label id="loCovered" text="Number of Learning Objects covered: 1" />
						<s:Label id="noOfQuestions" text="Number of Questions: 116" />
						<s:Label id="correctPercentage" text="Correct Answer %: 75" />
						<s:Label id="incorrectPercentage" text="Incorrect Answer %: 22" />
						<s:Label id="skippedPercentage" text="Skipped %: 3" />
					</s:VGroup>
					<s:Group width="63%" height="100%" id="statsChartContainer">
						<charts:StatsWedgeChart id="statsChart"
												scaleX="{getChartsScale(statsChart)}"
												scaleY="{getChartsScale(statsChart)}"
												verticalCenter="0" horizontalCenter="0"/>
					</s:Group>
				</s:HGroup>
				<s:Group width="75%" height="100%" excludeFrom="Class, StudentStats" >
					<s:Group id="chartContainer" height="95%" width="100%" verticalCenter="0">
						<charts:accuracyBubblesChart id="accuracyChart"
													 includeIn="StudentAccuracy" 
													 scaleX="{getChartsScale(accuracyChart)}"
													 scaleY="{getChartsScale(accuracyChart)}"
													 verticalCenter="0" horizontalCenter="0"/>
						<charts:LOChart id="loChart" 
										includeIn="StudentLO" 
										scaleX="{getChartsScale(loChart)}"
										scaleY="{getChartsScale(loChart)}"
										verticalCenter="0" horizontalCenter="0"/>
						<charts:PerformanceTimeColumn id="performanceChart" 
													  includeIn="StudentPerformance" 
													  scaleX="{getChartsScale(performanceChart)}"
													  scaleY="{getChartsScale(performanceChart)}"
													  verticalCenter="0" horizontalCenter="0"/>
						<charts:PerformanceTimeColumn id="performanceClassAverageChart" 
													  includeIn="ClassPerformance" 
													  scaleX="{getChartsScale(performanceClassAverageChart)}"
													  scaleY="{getChartsScale(performanceClassAverageChart)}"
													  verticalCenter="0" horizontalCenter="0"
													  studentStats="false"/>
						<charts:TimeSpentStatistics id="timeSpentChart"
													includeIn="StudentTimeSpent" 
													scaleX="{getChartsScale(timeSpentChart)}"
													scaleY="{getChartsScale(timeSpentChart)}"
													verticalCenter="0" horizontalCenter="0"/>
						<charts:TimeSpentStatistics id="classTimeSpentChart"
													includeIn="ClassTimeSpent" 
													scaleX="{getChartsScale(classTimeSpentChart)}"
													scaleY="{getChartsScale(classTimeSpentChart)}"
													verticalCenter="0" horizontalCenter="0" showClass="true"/>
					</s:Group>
				</s:Group>
			</s:HGroup>
		</s:BorderContainer>
		<s:HGroup width="100%" height="15%">
			<s:HGroup width="40%" height="100%" visible="{this.currentState.search('Student') > -1}"
					  horizontalAlign="right">
				<UI:CustomButton id="btnQuestionsAnswers" 
								 style="btnQuestionsAnswers" height="100%" width="15%"/>
				<UI:CustomButton id="btnChat" 
								 style="btnChat" height="100%" width="15%"
								 click="openWindow(event)"/>
				<UI:CustomButton id="btnSpecialAssignment" 
								 style="btnSpecialAssignment" height="100%" width="15%"
								 click="openProblemSetWindow(event)"/>
			</s:HGroup>
			<s:HGroup width="60%" height="100%" horizontalAlign="right">
				<UI:CustomButton id="btnStats"
								 click="{this.currentState = this.currentState.search('Class') > -1? 
								 'ClassStats':'StudentStats'}"
								 style="btnStats" height="100%" width="15%"
								 toolTip="Level-Wise Starts"
								 excludeFrom="Class, ClassPerformance, ClassTimeSpent"/>
				<UI:CustomButton id="btnAccuracy" 
								 click="{this.currentState = this.currentState.search('Class') > -1? 
								 							'ClassAccuracy':'StudentAccuracy'}"
								 style="btnAccuracy" height="100%" width="15%"
								 toolTip="Accuracy Stats"
								 excludeFrom="Class, ClassPerformance, ClassTimeSpent"/>
				<UI:CustomButton id="btnLO"
								 click="{this.currentState = this.currentState.search('Class') > -1? 
								 							'ClassLO':'StudentLO'}"
								 style="btnLO" height="100%" width="15%"
								 toolTip="LO Progress"
								 excludeFrom="Class, ClassPerformance, ClassTimeSpent"/>
				<UI:CustomButton id="btnPerformance"
								 click="{this.currentState = this.currentState.search('Class') > -1? 
								 							'ClassPerformance':'StudentPerformance'}"
								 style="btnPerformance" height="100%" width="15%"
								 toolTip="Performance Stats"/>
				<UI:CustomButton id="btnTimeSpent"
								 click="{this.currentState = this.currentState.search('Class') > -1? 
								 							'ClassTimeSpent':'StudentTimeSpent'}"
								 style="btnTimeSpent" height="100%" width="15%"
								 toolTip="Time-Spent Stats"/>
			</s:HGroup>
		</s:HGroup>
	</s:VGroup>
</s:Group>