<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 width="100%" height="100%" xmlns:UI="com.Teacher.UI.*"
		 currentState="Class" xmlns:charts="com.Teacher.UI.charts.*"
		 color="0xFFFFFF" xmlns:controls="com.brightPoint.controls.*" 
		 xmlns:reflector="com.common.reflector.*">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<mx:NumberFormatter id="formatter" />
	</fx:Declarations>
	<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace UI "com.Teacher.UI.*";
		@namespace charts "com.Teacher.UI.charts.*";
		@namespace controls "com.brightPoint.controls.*";
		@namespace reflector "com.common.reflector.*";
		
		.pointsGaugeSkin {
			faceSkin:		ClassReference("skins.PointsGaugeSkin");
			indicatorSkin:		ClassReference("skins.PointsGaugeSkin");
			indicatorCrownSkin:		ClassReference("skins.PointsGaugeSkin");
			highlightSkin:		ClassReference("skins.PointsGaugeSkin");
		}
		
		.loGaugeSkin {
			faceSkin:		ClassReference("skins.LOGaugeSkin");
			indicatorSkin:		ClassReference("skins.LOGaugeSkin");
			indicatorCrownSkin:		ClassReference("skins.LOGaugeSkin");
			highlightSkin:		ClassReference("skins.LOGaugeSkin");
		}
		
		.timeGaugeSkin {
			faceSkin:		ClassReference("skins.TimeGaugeSkin");
			indicatorSkin:		ClassReference("skins.TimeGaugeSkin");
			indicatorCrownSkin:		ClassReference("skins.TimeGaugeSkin");
			highlightSkin:		ClassReference("skins.TimeGaugeSkin");
		}
		
		.gaugeLabel {
			fontSize:14pt;
			color:#FFFFFF;	
		}
	</fx:Style>
	<fx:Script>
		<![CDATA[			
			import mx.core.IFlexDisplayObject;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import skins.TimeGaugeSkin;
			
			/**
			 * This sets the scale of the chart to fit it into the parent containers' dimensions. This is preferred to
			 * changing the dimensions of the chart directly, to avoid having to reset font-size automatically. Scaling
			 * changes the font-size as seen on the screen too proportionally and keeps the chart readable.
			 * */
			[bindable]
			private function getChartsScale(chart:Group):Number
			{
				var scaleX:Number = (chart == statsChart? 0.3: 0.7) * middleContainer.width / chart.width;;
				var scaleY:Number = (chart == statsChart? 0.6: 1) * middleContainer.height / chart.height;
				return Math.min(scaleX, scaleY);
			}
			
			/**
			 * This opens a new window for assigning problem sets to the currently selected student
			 * */
			protected function openProblemSetWindow(event:Event):void
			{
				var problemSetWindow:CreateProblemSet = new CreateProblemSet();
				problemSetWindow.open(true);
			}
			
			/**
			 * Used for the chat popup.
			 * */
			private function openWindow(event:Event):void
			{
				var chat:chatWindow = PopUpManager.createPopUp(this, chatWindow, false) as chatWindow; 
				chat.otherUser = new User("Roopesh");
				chat.user = new User("Sang");
			}
			
		]]>
	</fx:Script>
	<s:states>
		<s:State name="Class" />
		<s:State name="ClassStats" />
		<s:State name="ClassLO" />
		<s:State name="ClassPerformance" />
		<s:State name="ClassTimeSpent" />
		<s:State name="ClassAccuracy" />
		<s:State name="StudentAccuracy" />
		<s:State name="StudentLO" />
		<s:State name="StudentPerformance" />
		<s:State name="StudentStats" />
		<s:State name="StudentTimeSpent" />		
	</s:states>
	<s:Rect width="100%" height="100%">
		<s:fill>
			<s:SolidColor color="0x000000"/>
		</s:fill>
	</s:Rect>
	<s:VGroup id="mainContainer" width="100%" height="100%">
		<s:HGroup width="100%" height="15%" id="topContainer">
			<UI:CustomButton id="classButton"  
							 click="{this.currentState = 'Class'}" 
							 label="Class" height="100%" width="12%"
							 style="performanceClass"
							 selected="{this.currentState.search('Class')>-1}">
			</UI:CustomButton>
			<UI:CustomButton id="studentButton" 
							 click="{this.currentState = 'StudentStats'}" 
							 label="Student" height="100%" width="12%"
							 style="performanceStudent"
							 selected="{this.currentState.search('Student')>-1}">
			</UI:CustomButton>
			<UI:DateRangePick width="25%"/>	
			<UI:statsSummary id="statsSummary" height="100%" width="48%" />
		</s:HGroup>
		<s:BorderContainer  height="75%" width="100%" color="0x000000">
			<s:Rect  width="100%" height="100%">
				<s:fill>
					<s:SolidColor color="0xFFFFFF"/>
				</s:fill>
			</s:Rect>		
			<s:HGroup id="middleContainer" height="100%" width="100%">
				<s:DataGrid id="classGrid" includeIn="Class" height="100%" width="100%" >
				</s:DataGrid>
				<s:DataGrid id="studentGrid" excludeFrom="Class" width="25%" height="100%">
				</s:DataGrid>
				<s:VGroup width="75%" height="100%" id="statsContainer" includeIn="StudentStats" verticalAlign="middle"
						  gap="0">
					<s:HGroup width="100%" height="70%" gap="0" horizontalCenter="0">
						<UI:vitalStats id="studentVitalStats" width="50%"  height="100%"/>						
						<s:BorderContainer width="50%" height="100%" id="statsChartContainer" top="0">
							<charts:StatsChart id="statsChart"
											   scaleX="{getChartsScale(statsChart)}"
											   scaleY="{getChartsScale(statsChart)}"
											   verticalCenter="0" horizontalCenter="0"/>							
						</s:BorderContainer>
					</s:HGroup>	
					<UI:remarksBox id="remarksBox" width="100%" height="30%"/>
				</s:VGroup>
				<s:VGroup width="75%" height="100%" id="classStatsContainer" includeIn="ClassStats" verticalAlign="middle"
						  gap="0">
					<s:HGroup width="100%" height="100%" gap="0" horizontalCenter="0">
						<s:VGroup width="50%" height="100%" gap="0">
							<UI:vitalStats id="classVitalStats" classMode="true" width="100%" height="70%"/>	
<!--							<UI:performersAndLaggards width="100%" height="25%"/>-->
							<UI:classSchedule width="100%" height="30%"/>
						</s:VGroup>						
						<s:BorderContainer width="50%" height="100%" id="classStatsChartContainer" top="0">
							<charts:classLODifficulty id="classLODifficulty" width="100%" height="100%" 
													  verticalCenter="0" horizontalCenter="0" />
						</s:BorderContainer>
					</s:HGroup>

				</s:VGroup>
				<s:Group width="75%" height="100%" excludeFrom="Class, StudentStats, ClassStats" >
					<s:Group id="chartContainer" height="95%" width="100%" verticalCenter="0">
						<charts:accuracyBubblesChart id="accuracyChart"
													 includeIn="StudentAccuracy" 
													 scaleX="{getChartsScale(accuracyChart)}"
													 scaleY="{getChartsScale(accuracyChart)}"
													 verticalCenter="0" horizontalCenter="0"/>
						<charts:LOChart id="loChart" 
										includeIn="StudentLO" 
										scaleX="{getChartsScale(loChart)}"
										scaleY="{getChartsScale(loChart)}"
										verticalCenter="0" horizontalCenter="0"/>
						<charts:LOChart id="classLoChart" 
										includeIn="ClassLO" 
										scaleX="{getChartsScale(classLoChart)}"
										scaleY="{getChartsScale(classLoChart)}"
										verticalCenter="0" classMode="true" 
										horizontalCenter="0"/>
						<charts:PerformanceChart id="performanceChart" 
												 includeIn="StudentPerformance" 
												 scaleX="{getChartsScale(performanceChart)}"
												 scaleY="{getChartsScale(performanceChart)}"
												 verticalCenter="0" horizontalCenter="0"/>
						<charts:PerformanceChart id="performanceClassAverageChart" 
												 includeIn="ClassPerformance" 
												 scaleX="{getChartsScale(performanceClassAverageChart)}"
												 scaleY="{getChartsScale(performanceClassAverageChart)}"
												 verticalCenter="0" horizontalCenter="0"
												 studentStats="false"/>
						<charts:TimeSpentChart id="timeSpentChart"
											   includeIn="StudentTimeSpent" 
											   scaleX="{getChartsScale(timeSpentChart)}"
											   scaleY="{getChartsScale(timeSpentChart)}"
											   verticalCenter="0" horizontalCenter="0"/>
						<charts:TimeSpentChart id="classTimeSpentChart"
											   includeIn="ClassTimeSpent" 
											   scaleX="{getChartsScale(classTimeSpentChart)}"
											   scaleY="{getChartsScale(classTimeSpentChart)}"
											   verticalCenter="0" horizontalCenter="0" showClass="true"/>
						<charts:accuracyBubblesChart id="classAccuracyChart"
													 includeIn="ClassAccuracy" 
													 scaleX="{getChartsScale(classAccuracyChart)}"
													 scaleY="{getChartsScale(classAccuracyChart)}"
													 verticalCenter="0" horizontalCenter="0"
													 classMode="true"/>
					</s:Group>
				</s:Group>
			</s:HGroup>
		</s:BorderContainer>
		<s:HGroup width="100%" height="15%">
			<s:HGroup width="40%" height="100%" visible="{this.currentState.search('Student') > -1}"
					  horizontalAlign="right">
				<UI:CustomButton id="btnQuestionsAnswers" 
								 style="btnQuestionsAnswers" height="100%" width="15%"/>
				<UI:CustomButton id="btnChat" 
								 style="btnChat" height="100%" width="15%"
								 click="openWindow(event)"/>
				<UI:CustomButton id="btnSpecialAssignment" 
								 style="btnSpecialAssignment" height="100%" width="15%"
								 click="openProblemSetWindow(event)"/>
			</s:HGroup>
			<s:HGroup width="60%" height="100%" horizontalAlign="right">
				<UI:CustomButton id="btnStats"
								 click="{this.currentState = this.currentState.search('Class') > -1? 
								 'ClassStats':'StudentStats'}"
								  style="btnStats" height="100%" width="15%"
								  toolTip="Overall Stats"
								  selected="{this.currentState == 'StudentStats' ||
								  			this.currentState == 'ClassStats'}"/>
				<UI:CustomButton id="btnAccuracy" 
								 click="{this.currentState = this.currentState.search('Class') > -1? 
								 'ClassAccuracy':'StudentAccuracy'}"
								 style="btnAccuracy" height="100%" width="15%"
								 toolTip="Accuracy Stats"
								 selected="{this.currentState.search('Accuracy')>-1}"/>
				<UI:CustomButton id="btnLO"
								 click="{this.currentState = this.currentState.search('Class') > -1? 
								 'ClassLO':'StudentLO'}"
								 style="btnLO" height="100%" width="15%"
								 toolTip="LO Progress"
								 selected="{this.currentState.search('LO')>-1}"/>
				<UI:CustomButton id="btnPerformance"
								 click="{this.currentState = this.currentState.search('Class') > -1? 
								 'ClassPerformance':'StudentPerformance'}"
								 style="btnPerformance" height="100%" width="15%"
								 selected="{this.currentState.search('Performance')>-1}"
								 toolTip="Performance Stats"/>
				<UI:CustomButton id="btnTimeSpent"
								 click="{this.currentState = this.currentState.search('Class') > -1? 
								 'ClassTimeSpent':'StudentTimeSpent'}"
								 selected="{this.currentState.search('TimeSpent')>-1}"
								 style="btnTimeSpent" height="100%" width="15%"
								 toolTip="Time-Spent Stats"/>
			</s:HGroup>
		</s:HGroup>
	</s:VGroup>
</s:Group>